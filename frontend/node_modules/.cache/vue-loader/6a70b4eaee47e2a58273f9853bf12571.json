{"remainingRequest":"/Users/zanfu/Documents/repo/iot-proj/vue-fileupload/markov-text-generator/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zanfu/Documents/repo/iot-proj/vue-fileupload/markov-text-generator/src/components/Uploader.vue?vue&type=style&index=0&id=3c8050c4&scoped=true&lang=css&","dependencies":[{"path":"/Users/zanfu/Documents/repo/iot-proj/vue-fileupload/markov-text-generator/src/components/Uploader.vue","mtime":1665010179704},{"path":"/Users/zanfu/Documents/repo/iot-proj/vue-fileupload/markov-text-generator/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zanfu/Documents/repo/iot-proj/vue-fileupload/markov-text-generator/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1655715156000},{"path":"/Users/zanfu/Documents/repo/iot-proj/vue-fileupload/markov-text-generator/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/zanfu/Documents/repo/iot-proj/vue-fileupload/markov-text-generator/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zanfu/Documents/repo/iot-proj/vue-fileupload/markov-text-generator/node_modules/vue-loader/lib/index.js","mtime":1655715099000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CmRpdiB7CiAgdGV4dC1hbGlnbjogbGVmdDsKfQoudGl0bGUgewogIHRleHQtYWxpZ246IGNlbnRlcjsKfQouYm94LWNhcmQgewogIHdpZHRoOiA2MDBweDsKfQo="},{"version":3,"sources":["Uploader.vue"],"names":[],"mappings":";AA8IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Uploader.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div>\n    <el-row>\n      <div class=\"title\">\n        <h1>Text Generator</h1>\n      </div>\n    </el-row>\n    <el-row>\n      <el-col :span=\"30\">\n        <el-form label-width=\"120px\">\n          <el-form-item>\n            <div>\n              Key size, decide how many words as prefix:\n              <el-input-number v-model=\"keySize\" @change=\"keySizeChange\" :min=\"1\" :max=\"6\"></el-input-number>\n            </div>\n          </el-form-item>\n\n          <el-form-item>\n            <div>\n              Word numbers, decide how many words you want to generate:\n              <el-input-number v-model=\"numberOfWords\" @change=\"keySizeChange\" :min=\"20\" :max=\"100\"></el-input-number>\n            </div>\n          </el-form-item>\n\n          <el-form-item>\n            <label>\n              Text based file, file size must be smaller than 512KB !\n              <input\n                type=\"file\"\n                ref=\"file\"\n                @change=\"selectFile\"\n                multiple=\"multiple\"\n              />\n            </label>\n            <button class=\"btn btn-success\" :disabled=\"!selectedFiles\" @click=\"upload\">Upload</button>\n          </el-form-item>\n          <el-form-item>\n            <el-button\n              v-show=\"generate\"\n              type=\"primary\"\n              @click=\"generateText\"\n            >Generate Text and See magic non-sense!</el-button>\n            <el-card v-if=\"generateDisplay\">\n              <div>{{generatedText}}</div>\n            </el-card>\n          </el-form-item>\n        </el-form>\n      </el-col>\n    </el-row>\n  </div>\n</template>\n\n<script>\nimport axios from \"axios\";\n\nexport default {\n  props: {\n    msg: String\n  },\n  data() {\n    return {\n      selectedFiles: undefined,\n      files: [],\n      currentFile: false,\n      keySize: 1,\n      numberOfWords: 50,\n      message: \"\",\n      generate: false,\n      generateDisplay: false,\n      generatedText: \"\",\n      fileName: \"\"\n    };\n  },\n  methods: {\n    selectFile() {\n      this.selectedFiles = this.$refs.file.files;\n      this.fileName = this.selectedFiles.item(0).name;\n      console.log(this.fileName);\n    },\n    keySizeChange(val) {\n      console.table(val);\n    },\n    generateText() {\n      axios({\n        method: \"get\",\n        url:\n          \"/api/generate?keySize=\" +\n          this.keySize +\n          \"&numberOfWords=\" +\n          this.numberOfWords +\n          \"&fileName=\" +\n          this.fileName\n      })\n        .then(response => {\n          this.generatedText = response.data;\n          this.generateDisplay = true;\n        })\n        .catch(response => {\n          this.alerting(response.response.data);\n          this.currentFile = undefined;\n          this.generate = false;\n          this.generateDisplay = false;\n        });\n    },\n    upload() {\n      this.progress = 0;\n      this.currentFile = this.selectedFiles.item(0);\n      let fdata = new FormData();\n      fdata.append(\"file\", this.currentFile);\n      axios({\n        method: \"post\",\n        url: \"/api/upload\",\n        data: fdata,\n        config: {\n          \"Content-type\": \"multipart/form-data\"\n        }\n      })\n        .then(response => {\n          this.generate = true;\n          this.generateDisplay = false;\n          this.alertingSuccess(\"upload success\");\n        })\n        .catch(response => {\n          this.alerting(response.response.data);\n          this.currentFile = undefined;\n          this.generate = false;\n          this.generateDisplay = false;\n        });\n      this.selectedFiles = undefined;\n    },\n    alerting(message) {\n      this.$message.error(message);\n    },\n    alertingSuccess(message) {\n      this.$message({ message: message, type: \"success\" });\n    }\n  }\n};\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\ndiv {\n  text-align: left;\n}\n.title {\n  text-align: center;\n}\n.box-card {\n  width: 600px;\n}\n</style>\n"]}]}